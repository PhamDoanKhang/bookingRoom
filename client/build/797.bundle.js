"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[797],{797:(n,t,e)=>{e.r(t),e.d(t,{CANCEL:()=>c.n1,END:()=>x,SAGA_LOCATION:()=>c.b_,buffers:()=>u.H,channel:()=>S,default:()=>U,detach:()=>u.I,eventChannel:()=>M,isEnd:()=>R,multicastChannel:()=>A,runSaga:()=>Q,stdChannel:()=>T});var c=e(2470),r=e(7462),a=e(3366),o=e(2847),u=e(5852),i=e(4890);const f=function(){var n={};return n.promise=new Promise((function(t,e){n.resolve=t,n.reject=e})),n};var l=[],s=0;function v(n){try{p(),n()}finally{g()}}function d(n){l.push(n),s||(p(),y())}function h(n){try{return p(),n()}finally{y()}}function p(){s++}function g(){s--}function y(){var n;for(g();!s&&void 0!==(n=l.shift());)v(n)}var k=function(n){return function(t){return n.some((function(n){return j(n)(t)}))}},E=function(n){return function(t){return n(t)}},m=function(n){return function(t){return t.type===String(n)}},b=function(n){return function(t){return t.type===n}},C=function(){return u.k};function j(n){var t="*"===n?C:(0,o.Z_)(n)?m:(0,o.IX)(n)?k:(0,o.eR)(n)?m:(0,o.Yl)(n)?E:(0,o.NA)(n)?b:null;if(null===t)throw new Error("invalid pattern: "+n);return t(n)}var x={type:c.sZ},R=function(n){return n&&n.type===c.sZ};function S(n){void 0===n&&(n=(0,u.e)());var t=!1,e=[];return{take:function(c){t&&n.isEmpty()?c(x):n.isEmpty()?(e.push(c),c.cancel=function(){(0,u.r)(e,c)}):c(n.take())},put:function(c){if(!t){if(0===e.length)return n.put(c);e.shift()(c)}},flush:function(e){t&&n.isEmpty()?e(x):e(n.flush())},close:function(){if(!t){t=!0;var n=e;e=[];for(var c=0,r=n.length;c<r;c++)(0,n[c])(x)}}}}function M(n,t){void 0===t&&(t=(0,u.n)());var e,c=!1,r=S(t),a=function(){c||(c=!0,(0,o.Yl)(e)&&e(),r.close())};return e=n((function(n){R(n)?a():r.put(n)})),e=(0,u.o)(e),c&&e(),{take:r.take,flush:r.flush,close:a}}function A(){var n,t=!1,e=[],r=e,a=function(){r===e&&(r=e.slice())},o=function(){t=!0;var n=e=r;r=[],n.forEach((function(n){n(x)}))};return(n={})[c.AS]=!0,n.put=function(n){if(!t)if(R(n))o();else for(var a=e=r,u=0,i=a.length;u<i;u++){var f=a[u];f[c.uq](n)&&(f.cancel(),f(n))}},n.take=function(n,e){void 0===e&&(e=C),t?n(x):(n[c.uq]=e,a(),r.push(n),n.cancel=(0,u.o)((function(){a(),(0,u.r)(r,n)})))},n.close=o,n}function T(){var n=A(),t=n.put;return n.put=function(n){n[c.Nm]?t(n):d((function(){t(n)}))},n}var I=0,w=1,N=2,O=3;function Z(n,t){var e=n[c.n1];(0,o.Yl)(e)&&(t.cancel=e),n.then(t,(function(n){t(n,!0)}))}var q,D=0,W=function(){return++D};function X(n){n.isRunning()&&n.cancel()}var Y=((q={})[u.T]=function(n,t,e){var r=t.channel,a=void 0===r?n.channel:r,u=t.pattern,i=t.maybe,f=function(n){n instanceof Error?e(n,!0):!R(n)||i?e(n):e(c.EO)};try{a.take(f,(0,o.d5)(u)?j(u):null)}catch(n){return void e(n,!0)}e.cancel=f.cancel},q[u.P]=function(n,t,e){var c=t.channel,r=t.action,a=t.resolve;d((function(){var t;try{t=(c?c.put:n.dispatch)(r)}catch(n){return void e(n,!0)}a&&(0,o.MC)(t)?Z(t,e):e(t)}))},q[u.A]=function(n,t,e,c){var r=c.digestEffect,a=D,i=Object.keys(t);if(0!==i.length){var f=(0,u.l)(t,e);i.forEach((function(n){r(t[n],a,f[n],n)}))}else e((0,o.IX)(t)?[]:{})},q[u.R]=function(n,t,e,c){var r=c.digestEffect,a=D,i=Object.keys(t),f=(0,o.IX)(t)?(0,u.m)(i.length):{},l={},s=!1;i.forEach((function(n){var t=function(t,c){s||(c||(0,u.s)(t)?(e.cancel(),e(t,c)):(e.cancel(),s=!0,f[n]=t,e(f)))};t.cancel=u.t,l[n]=t})),e.cancel=function(){s||(s=!0,i.forEach((function(n){return l[n].cancel()})))},i.forEach((function(n){s||r(t[n],a,l[n],n)}))},q[u.C]=function(n,t,e,c){var r=t.context,a=t.fn,i=t.args,f=c.task;try{var l=a.apply(r,i);if((0,o.MC)(l))return void Z(l,e);if((0,o.hZ)(l))return void K(n,l,f.context,D,(0,u.j)(a),!1,e);e(l)}catch(n){e(n,!0)}},q[u.a]=function(n,t,e){var c=t.context,r=t.fn,a=t.args;try{var u=function(n,t){(0,o.sR)(n)?e(t):e(n,!0)};r.apply(c,a.concat(u)),u.cancel&&(e.cancel=u.cancel)}catch(n){e(n,!0)}},q[u.F]=function(n,t,e,c){var r=t.context,a=t.fn,i=t.args,f=t.detached,l=c.task,s=function(n){var t=n.context,e=n.fn,c=n.args;try{var r=e.apply(t,c);if((0,o.hZ)(r))return r;var a=!1;return(0,u.q)((function(n){return a?{value:n,done:!0}:(a=!0,{value:r,done:!(0,o.MC)(r)})}))}catch(n){return(0,u.q)((function(){throw n}))}}({context:r,fn:a,args:i}),v=function(n,t){return n.isSagaIterator?{name:n.meta.name}:(0,u.j)(t)}(s,a);h((function(){var t=K(n,s,l.context,D,v,f,void 0);f?e(t):t.isRunning()?(l.queue.addTask(t),e(t)):t.isAborted()?l.queue.abort(t.error()):e(t)}))},q[u.J]=function(n,t,e,c){var r=c.task,a=function(n,t){if(n.isRunning()){var e={task:r,cb:t};t.cancel=function(){n.isRunning()&&(0,u.r)(n.joiners,e)},n.joiners.push(e)}else n.isAborted()?t(n.error(),!0):t(n.result())};if((0,o.IX)(t)){if(0===t.length)return void e([]);var i=(0,u.l)(t,e);t.forEach((function(n,t){a(n,i[t])}))}else a(t,e)},q[u.b]=function(n,t,e,r){var a=r.task;t===c.sC?X(a):(0,o.IX)(t)?t.forEach(X):X(t),e()},q[u.S]=function(n,t,e){var c=t.selector,r=t.args;try{e(c.apply(void 0,[n.getState()].concat(r)))}catch(n){e(n,!0)}},q[u.d]=function(n,t,e){var c=t.pattern,r=S(t.buffer),a=j(c),o=function t(e){R(e)||n.channel.take(t,a),r.put(e)},u=r.close;r.close=function(){o.cancel(),u()},n.channel.take(o,a),e(r)},q[u.f]=function(n,t,e,c){e(c.task.isCancelled())},q[u.g]=function(n,t,e){t.flush(e)},q[u.G]=function(n,t,e,c){e(c.task.context[t])},q[u.h]=function(n,t,e,c){var r=c.task;(0,u.p)(r.context,t),e()},q);function z(n,t){return n+"?"+t}function P(n){var t=n.name,e=n.location;return e?t+"  "+z(e.fileName,e.lineNumber):t}function _(n){var t=(0,u.u)((function(n){return n.cancelledTasks}),n);return t.length?["Tasks cancelled due to error:"].concat(t).join("\n"):""}var G=null,L=[],B=function(n){n.crashedEffect=G,L.push(n)},F=function(){G=null,L.length=0},H=function(n){G=n},J=function(){var n,t,e=L[0],c=L.slice(1),r=e.crashedEffect?(n=e.crashedEffect,(t=(0,u.v)(n))?t.code+"  "+z(t.fileName,t.lineNumber):""):null;return["The above error occurred in task "+P(e.meta)+(r?" \n when executing effect "+r:"")].concat(c.map((function(n){return"    created by "+P(n.meta)})),[_(L)]).join("\n")};function K(n,t,e,r,a,i,l){var s=n.finalizeRunEffect((function(t,e,r){(0,o.MC)(t)?Z(t,r):(0,o.hZ)(t)?K(n,t,d.context,e,a,!1,r):t&&t[c.IO]?(0,Y[t.type])(n,t.payload,r,h):r(t)}));p.cancel=u.t;var v={meta:a,cancel:function(){v.status===I&&(v.status=w,p(c.Wd))},status:I},d=function(n,t,e,r,a,o,i){var l;void 0===i&&(i=u.t);var s,v,d=I,h=null,p=[],g=Object.create(e),y=function(n,t,e){var c,r=[],a=!1;function o(n){t(),f(),e(n,!0)}function i(t){r.push(t),t.cont=function(i,f){a||((0,u.r)(r,t),t.cont=u.t,f?o(i):(t===n&&(c=i),r.length||(a=!0,e(c))))}}function f(){a||(a=!0,r.forEach((function(n){n.cont=u.t,n.cancel()})),r=[])}return i(n),{addTask:i,cancelAll:f,abort:o,getTasks:function(){return r}}}(t,(function(){p.push.apply(p,y.getTasks().map((function(n){return n.meta.name})))}),k);function k(t,e){if(e){if(d=N,B({meta:a,cancelledTasks:p}),E.isRoot){var r=J();F(),n.onError(t,{sagaStack:r})}v=t,h&&h.reject(t)}else t===c.Wd?d=w:d!==w&&(d=O),s=t,h&&h.resolve(t);E.cont(t,e),E.joiners.forEach((function(n){n.cb(t,e)})),E.joiners=null}var E=((l={})[c.Cs]=!0,l.id=r,l.meta=a,l.isRoot=o,l.context=g,l.joiners=[],l.queue=y,l.cancel=function(){d===I&&(d=w,y.cancelAll(),k(c.Wd,!1))},l.cont=i,l.end=k,l.setContext=function(n){(0,u.p)(g,n)},l.toPromise=function(){return h||(h=f(),d===N?h.reject(v):d!==I&&h.resolve(s)),h.promise},l.isRunning=function(){return d===I},l.isCancelled=function(){return d===w||d===I&&t.status===w},l.isAborted=function(){return d===N},l.result=function(){return s},l.error=function(){return v},l);return E}(n,v,e,r,a,i,l),h={task:d,digestEffect:g};return l&&(l.cancel=d.cancel),p(),d;function p(n,e){try{var a;e?(a=t.throw(n),F()):(0,u.y)(n)?(v.status=w,p.cancel(),a=(0,o.Yl)(t.return)?t.return(c.Wd):{done:!0,value:c.Wd}):a=(0,u.z)(n)?(0,o.Yl)(t.return)?t.return():{done:!0}:t.next(n),a.done?(v.status!==w&&(v.status=O),v.cont(a.value)):g(a.value,r,p)}catch(n){if(v.status===w)throw n;v.status=N,v.cont(n,!0)}}function g(t,e,c,r){void 0===r&&(r="");var a,o=W();function i(e,r){a||(a=!0,c.cancel=u.t,n.sagaMonitor&&(r?n.sagaMonitor.effectRejected(o,e):n.sagaMonitor.effectResolved(o,e)),r&&H(t),c(e,r))}n.sagaMonitor&&n.sagaMonitor.effectTriggered({effectId:o,parentEffectId:e,label:r,effect:t}),i.cancel=u.t,c.cancel=function(){a||(a=!0,i.cancel(),i.cancel=u.t,n.sagaMonitor&&n.sagaMonitor.effectCancelled(o))},s(t,o,i)}}function Q(n,t){for(var e=n.channel,c=void 0===e?T():e,r=n.dispatch,a=n.getState,o=n.context,f=void 0===o?{}:o,l=n.sagaMonitor,s=n.effectMiddlewares,v=n.onError,d=void 0===v?u.B:v,p=arguments.length,g=new Array(p>2?p-2:0),y=2;y<p;y++)g[y-2]=arguments[y];var k,E=t.apply(void 0,g),m=W();if(l&&(l.rootSagaStarted=l.rootSagaStarted||u.t,l.effectTriggered=l.effectTriggered||u.t,l.effectResolved=l.effectResolved||u.t,l.effectRejected=l.effectRejected||u.t,l.effectCancelled=l.effectCancelled||u.t,l.actionDispatched=l.actionDispatched||u.t,l.rootSagaStarted({effectId:m,saga:t,args:g})),s){var b=i.qC.apply(void 0,s);k=function(n){return function(t,e,c){return b((function(t){return n(t,e,c)}))(t)}}}else k=u.E;var C={channel:c,dispatch:(0,u.D)(r),getState:a,sagaMonitor:l,onError:d,finalizeRunEffect:k};return h((function(){var n=K(C,E,f,m,(0,u.j)(t),!0,void 0);return l&&l.effectResolved(m,n),n}))}const U=function(n){var t,e=void 0===n?{}:n,c=e.context,o=void 0===c?{}:c,i=e.channel,f=void 0===i?T():i,l=e.sagaMonitor,s=(0,a.Z)(e,["context","channel","sagaMonitor"]);function v(n){var e=n.getState,c=n.dispatch;return t=Q.bind(null,(0,r.Z)({},s,{context:o,channel:f,dispatch:c,getState:e,sagaMonitor:l})),function(n){return function(t){l&&l.actionDispatched&&l.actionDispatched(t);var e=n(t);return f.put(t),e}}}return v.run=function(){return t.apply(void 0,arguments)},v.setContext=function(n){(0,u.p)(o,n)},v}},3366:(n,t,e)=>{function c(n,t){if(null==n)return{};var e,c,r={},a=Object.keys(n);for(c=0;c<a.length;c++)e=a[c],t.indexOf(e)>=0||(r[e]=n[e]);return r}e.d(t,{Z:()=>c})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,