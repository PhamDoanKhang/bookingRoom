/*! For license information please see 689.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[689],{9818:(e,t,r)=>{r.r(t),r.d(t,{AbortedDeferredError:()=>J,Await:()=>Bt,BrowserRouter:()=>ir,Form:()=>fr,HashRouter:()=>lr,Link:()=>dr,MemoryRouter:()=>Ut,NavLink:()=>hr,Navigate:()=>Mt,NavigationType:()=>n,Outlet:()=>Ot,Route:()=>_t,Router:()=>jt,RouterProvider:()=>kt,Routes:()=>Tt,ScrollRestoration:()=>mr,UNSAFE_DataRouterContext:()=>Ie,UNSAFE_DataRouterStateContext:()=>ze,UNSAFE_LocationContext:()=>$e,UNSAFE_NavigationContext:()=>Ke,UNSAFE_RouteContext:()=>He,UNSAFE_useRouteId:()=>gt,UNSAFE_useScrollRestoration:()=>Lr,createBrowserRouter:()=>rr,createHashRouter:()=>nr,createMemoryRouter:()=>Ht,createPath:()=>m,createRoutesFromChildren:()=>Wt,createRoutesFromElements:()=>Wt,createSearchParams:()=>Qt,defer:()=>V,generatePath:()=>O,isRouteErrorResponse:()=>Q,json:()=>H,matchPath:()=>_,matchRoutes:()=>E,parsePath:()=>v,redirect:()=>X,renderMatches:()=>Kt,resolvePath:()=>B,unstable_HistoryRouter:()=>sr,unstable_useBlocker:()=>At,unstable_usePrompt:()=>Mr,useActionData:()=>Dt,useAsyncError:()=>Ct,useAsyncValue:()=>xt,useBeforeUnload:()=>Ur,useFetcher:()=>Cr,useFetchers:()=>Pr,useFormAction:()=>Sr,useHref:()=>qe,useInRouterContext:()=>Ye,useLinkClickHandler:()=>wr,useLoaderData:()=>Et,useLocation:()=>Ve,useMatch:()=>Ge,useMatches:()=>wt,useNavigate:()=>Ze,useNavigation:()=>yt,useNavigationType:()=>Xe,useOutlet:()=>rt,useOutletContext:()=>tt,useParams:()=>nt,useResolvedPath:()=>at,useRevalidator:()=>bt,useRouteError:()=>St,useRouteLoaderData:()=>Rt,useRoutes:()=>ot,useSearchParams:()=>Er,useSubmit:()=>Rr});var n,a=r(8416),o=r(5108);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(n||(n={}));const l="popstate";function s(e){void 0===e&&(e={});let t,{initialEntries:r=["/"],initialIndex:a,v5Compat:o=!1}=e;t=r.map(((e,t)=>d(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let i=c(null==a?t.length-1:a),l=n.Pop,s=null;function c(e){return Math.min(Math.max(e,0),t.length-1)}function u(){return t[i]}function d(e,r,n){void 0===r&&(r=null);let a=p(t?u().pathname:"/",e,r,n);return h("/"===a.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),a}function f(e){return"string"==typeof e?e:m(e)}return{get index(){return i},get action(){return l},get location(){return u()},createHref:f,createURL:e=>new URL(f(e),"http://localhost"),encodeLocation(e){let t="string"==typeof e?v(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,r){l=n.Push;let a=d(e,r);i+=1,t.splice(i,t.length,a),o&&s&&s({action:l,location:a,delta:1})},replace(e,r){l=n.Replace;let a=d(e,r);t[i]=a,o&&s&&s({action:l,location:a,delta:0})},go(e){l=n.Pop;let r=c(i+e),a=t[r];i=r,s&&s({action:l,location:a,delta:e})},listen:e=>(s=e,()=>{s=null})}}function c(e){return void 0===e&&(e={}),g((function(e,t){let{pathname:r,search:n,hash:a}=e.location;return p("",{pathname:r,search:n,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:m(t)}),null,e)}function u(e){return void 0===e&&(e={}),g((function(e,t){let{pathname:r="/",search:n="",hash:a=""}=v(e.location.hash.substr(1));return p("",{pathname:r,search:n,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let r=e.document.querySelector("base"),n="";if(r&&r.getAttribute("href")){let t=e.location.href,r=t.indexOf("#");n=-1===r?t:t.slice(0,r)}return n+"#"+("string"==typeof t?t:m(t))}),(function(e,t){h("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}function d(e,t){if(!1===e||null==e)throw new Error(t)}function h(e,t){if(!e){void 0!==o&&o.warn(t);try{throw new Error(t)}catch(e){}}}function f(e,t){return{usr:e.state,key:e.key,idx:t}}function p(e,t,r,n){return void 0===r&&(r=null),i({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?v(t):t,{state:r,key:t&&t.key||n||Math.random().toString(36).substr(2,8)})}function m(e){let{pathname:t="/",search:r="",hash:n=""}=e;return r&&"?"!==r&&(t+="?"===r.charAt(0)?r:"?"+r),n&&"#"!==n&&(t+="#"===n.charAt(0)?n:"#"+n),t}function v(e){let t={};if(e){let r=e.indexOf("#");r>=0&&(t.hash=e.substr(r),e=e.substr(0,r));let n=e.indexOf("?");n>=0&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function g(e,t,r,a){void 0===a&&(a={});let{window:o=document.defaultView,v5Compat:s=!1}=a,c=o.history,u=n.Pop,h=null,v=g();function g(){return(c.state||{idx:null}).idx}function y(){u=n.Pop;let e=g(),t=null==e?null:e-v;v=e,h&&h({action:u,location:w.location,delta:t})}function b(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,r="string"==typeof e?e:m(e);return d(t,"No window.location.(origin|href) available to create URL for href: "+r),new URL(r,t)}null==v&&(v=0,c.replaceState(i({},c.state,{idx:v}),""));let w={get action(){return u},get location(){return e(o,c)},listen(e){if(h)throw new Error("A history only accepts one active listener");return o.addEventListener(l,y),h=e,()=>{o.removeEventListener(l,y),h=null}},createHref:e=>t(o,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){u=n.Push;let a=p(w.location,e,t);r&&r(a,e),v=g()+1;let i=f(a,v),l=w.createHref(a);try{c.pushState(i,"",l)}catch(e){o.location.assign(l)}s&&h&&h({action:u,location:w.location,delta:1})},replace:function(e,t){u=n.Replace;let a=p(w.location,e,t);r&&r(a,e),v=g();let o=f(a,v),i=w.createHref(a);c.replaceState(o,"",i),s&&h&&h({action:u,location:w.location,delta:0})},go:e=>c.go(e)};return w}var y;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(y||(y={}));const b=new Set(["lazy","caseSensitive","path","id","index","children"]);function w(e,t,r,n){return void 0===r&&(r=[]),void 0===n&&(n={}),e.map(((e,a)=>{let o=[...r,a],l="string"==typeof e.id?e.id:o.join("-");if(d(!0!==e.index||!e.children,"Cannot specify children on an index route"),d(!n[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let r=i({},e,t(e),{id:l});return n[l]=r,r}{let r=i({},e,t(e),{id:l,children:void 0});return n[l]=r,e.children&&(r.children=w(e.children,t,o,n)),r}}))}function E(e,t,r){void 0===r&&(r="/");let n=T(("string"==typeof t?v(t):t).pathname||"/",r);if(null==n)return null;let a=R(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,r)=>e===t[r]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=M(a[e],j(n));return o}function R(e,t,r,n){void 0===t&&(t=[]),void 0===r&&(r=[]),void 0===n&&(n="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(d(i.relativePath.startsWith(n),'Absolute route path "'+i.relativePath+'" nested under path "'+n+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(n.length));let l=z([n,i.relativePath]),s=r.concat(i);e.children&&e.children.length>0&&(d(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),R(e.children,t,s,l)),(null!=e.path||e.index)&&t.push({path:l,score:U(l,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var r;if(""!==e.path&&null!=(r=e.path)&&r.includes("?"))for(let r of D(e.path))a(e,t,r);else a(e,t)})),t}function D(e){let t=e.split("/");if(0===t.length)return[];let[r,...n]=t,a=r.endsWith("?"),o=r.replace(/\?$/,"");if(0===n.length)return a?[o,""]:[o];let i=D(n.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}const S=/^:\w+$/,x=3,C=2,P=1,A=10,k=-2,L=e=>"*"===e;function U(e,t){let r=e.split("/"),n=r.length;return r.some(L)&&(n+=k),t&&(n+=C),r.filter((e=>!L(e))).reduce(((e,t)=>e+(S.test(t)?x:""===t?P:A)),n)}function M(e,t){let{routesMeta:r}=e,n={},a="/",o=[];for(let e=0;e<r.length;++e){let i=r[e],l=e===r.length-1,s="/"===a?t:t.slice(a.length)||"/",c=_({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},s);if(!c)return null;Object.assign(n,c.params);let u=i.route;o.push({params:n,pathname:z([a,c.pathname]),pathnameBase:W(z([a,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(a=z([a,c.pathnameBase]))}return o}function O(e,t){void 0===t&&(t={});let r=e;return r.endsWith("*")&&"*"!==r&&!r.endsWith("/*")&&(h(!1,'Route path "'+r+'" will be treated as if it were "'+r.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+r.replace(/\*$/,"/*")+'".'),r=r.replace(/\*$/,"/*")),(r.startsWith("/")?"/":"")+r.split(/\/+/).map(((e,r,n)=>{if(r===n.length-1&&"*"===e)return t["*"];const a=e.match(/^:(\w+)(\??)$/);if(a){const[,e,r]=a;let n=t[e];return"?"===r?null==n?"":n:(null==n&&d(!1,'Missing ":'+e+'" param'),n)}return e.replace(/\?$/g,"")})).filter((e=>!!e)).join("/")}function _(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[r,n]=function(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=!0),h("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let n=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(n.push(t),"/([^\\/]+)")));return e.endsWith("*")?(n.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),n]}(e.path,e.caseSensitive,e.end),a=t.match(r);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:n.reduce(((e,t,r)=>{if("*"===t){let e=l[r]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(r){return h(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+r+")."),e}}(l[r]||"",t),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function j(e){try{return decodeURI(e)}catch(t){return h(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function T(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let r=t.endsWith("/")?t.length-1:t.length,n=e.charAt(r);return n&&"/"!==n?null:e.slice(r)||"/"}function B(e,t){void 0===t&&(t="/");let{pathname:r,search:n="",hash:a=""}="string"==typeof e?v(e):e,o=r?r.startsWith("/")?r:function(e,t){let r=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?r.length>1&&r.pop():"."!==e&&r.push(e)})),r.length>1?r.join("/"):"/"}(r,t):t;return{pathname:o,search:K(n),hash:$(a)}}function F(e,t,r,n){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(n)+"].  Please separate it out to the `to."+r+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function N(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function I(e,t,r,n){let a;void 0===n&&(n=!1),"string"==typeof e?a=v(e):(a=i({},e),d(!a.pathname||!a.pathname.includes("?"),F("?","pathname","search",a)),d(!a.pathname||!a.pathname.includes("#"),F("#","pathname","hash",a)),d(!a.search||!a.search.includes("#"),F("#","search","hash",a)));let o,l=""===e||""===a.pathname,s=l?"/":a.pathname;if(n||null==s)o=r;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let c=B(a,o),u=s&&"/"!==s&&s.endsWith("/"),h=(l||"."===s)&&r.endsWith("/");return c.pathname.endsWith("/")||!u&&!h||(c.pathname+="/"),c}const z=e=>e.join("/").replace(/\/\/+/g,"/"),W=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),K=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",$=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",H=function(e,t){void 0===t&&(t={});let r="number"==typeof t?{status:t}:t,n=new Headers(r.headers);return n.has("Content-Type")||n.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),i({},r,{headers:n}))};class J extends Error{}class q{constructor(e,t){let r;this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],d(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,t)=>r=t)),this.controller=new AbortController;let n=()=>r(new J("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",n),this.controller.signal.addEventListener("abort",n),this.data=Object.entries(e).reduce(((e,t)=>{let[r,n]=t;return Object.assign(e,{[r]:this.trackPromise(r,n)})}),{}),this.done&&this.unlistenAbortSignal(),this.init=t}trackPromise(e,t){if(!(t instanceof Promise))return t;this.deferredKeys.push(e),this.pendingKeysSet.add(e);let r=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(r,e,null,t)),(t=>this.onSettle(r,e,t)));return r.catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),r}onSettle(e,t,r,n){return this.controller.signal.aborted&&r instanceof J?(this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>r}),Promise.reject(r)):(this.pendingKeysSet.delete(t),this.done&&this.unlistenAbortSignal(),r?(Object.defineProperty(e,"_error",{get:()=>r}),this.emit(!1,t),Promise.reject(r)):(Object.defineProperty(e,"_data",{get:()=>n}),this.emit(!1,t),n))}emit(e,t){this.subscribers.forEach((r=>r(e,t)))}subscribe(e){return this.subscribers.add(e),()=>this.subscribers.delete(e)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach(((e,t)=>this.pendingKeysSet.delete(t))),this.emit(!0)}async resolveData(e){let t=!1;if(!this.done){let r=()=>this.cancel();e.addEventListener("abort",r),t=await new Promise((t=>{this.subscribe((n=>{e.removeEventListener("abort",r),(n||this.done)&&t(n)}))}))}return t}get done(){return 0===this.pendingKeysSet.size}get unwrappedData(){return d(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[r,n]=t;return Object.assign(e,{[r]:Y(n)})}),{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function Y(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}const V=function(e,t){return void 0===t&&(t={}),new q(e,"number"==typeof t?{status:t}:t)},X=function(e,t){void 0===t&&(t=302);let r=t;"number"==typeof r?r={status:r}:void 0===r.status&&(r.status=302);let n=new Headers(r.headers);return n.set("Location",e),new Response(null,i({},r,{headers:n}))};class G{constructor(e,t,r,n){void 0===n&&(n=!1),this.status=e,this.statusText=t||"",this.internal=n,r instanceof Error?(this.data=r.toString(),this.error=r):this.data=r}}function Q(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const Z=["post","put","patch","delete"],ee=new Set(Z),te=["get",...Z],re=new Set(te),ne=new Set([301,302,303,307,308]),ae=new Set([307,308]),oe={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},ie={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},le={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},se=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ce="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ue=!ce,de=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)});function he(e){let t;if(d(e.routes.length>0,"You must provide a non-empty routes array to createRouter"),e.mapRouteProperties)t=e.mapRouteProperties;else if(e.detectErrorBoundary){let r=e.detectErrorBoundary;t=e=>({hasErrorBoundary:r(e)})}else t=de;let r,a={},o=w(e.routes,t,void 0,a),l=e.basename||"/",s=i({v7_normalizeFormMethod:!1,v7_prependBasename:!1},e.future),c=null,u=new Set,f=null,m=null,v=null,g=null!=e.hydrationData,b=E(o,e.history.location,l),R=null;if(null==b){let t=Ce(404,{pathname:e.history.location.pathname}),{matches:r,route:n}=xe(o);b=r,R={[n.id]:t}}let D,S,x=!(b.some((e=>e.route.lazy))||b.some((e=>e.route.loader))&&null==e.hydrationData),C={historyAction:e.history.action,location:e.history.location,matches:b,initialized:x,navigation:oe,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||R,fetchers:new Map,blockers:new Map},P=n.Pop,A=!1,k=!1,L=!1,U=[],M=[],O=new Map,_=0,j=-1,B=new Map,F=new Set,N=new Map,I=new Map,z=new Map,W=!1;function K(e){C=i({},C,e),u.forEach((e=>e(C)))}function $(t,a){var l,s;let c,u=null!=C.actionData&&null!=C.navigation.formMethod&&Me(C.navigation.formMethod)&&"loading"===C.navigation.state&&!0!==(null==(l=t.state)?void 0:l._isRedirect);c=a.actionData?Object.keys(a.actionData).length>0?a.actionData:null:u?C.actionData:null;let d=a.loaderData?De(C.loaderData,a.loaderData,a.matches||[],a.errors):C.loaderData;for(let[e]of z)re(e);let h=!0===A||null!=C.navigation.formMethod&&Me(C.navigation.formMethod)&&!0!==(null==(s=t.state)?void 0:s._isRedirect);r&&(o=r,r=void 0),K(i({},a,{actionData:c,loaderData:d,historyAction:P,location:t,initialized:!0,navigation:oe,revalidation:"idle",restoreScrollPosition:ge(t,a.matches||C.matches),preventScrollReset:h,blockers:new Map(C.blockers)})),k||P===n.Pop||(P===n.Push?e.history.push(t,t.state):P===n.Replace&&e.history.replace(t,t.state)),P=n.Pop,A=!1,k=!1,L=!1,U=[],M=[]}async function H(s,c,u){S&&S.abort(),S=null,P=s,k=!0===(u&&u.startUninterruptedRevalidation),function(e,t){if(f&&m&&v){let r=t.map((e=>Te(e,C.loaderData))),n=m(e,r)||e.key;f[n]=v()}}(C.location,C.matches),A=!0===(u&&u.preventScrollReset);let d=r||o,h=u&&u.overrideNavigation,p=E(d,c,l);if(!p){let e=Ce(404,{pathname:c.pathname}),{matches:t,route:r}=xe(d);return ve(),void $(c,{matches:t,loaderData:{},errors:{[r.id]:e}})}if(!(g=C.location,b=c,g.pathname!==b.pathname||g.search!==b.search||(""===g.hash||g.hash!==b.hash)&&""===b.hash||u&&u.submission&&Me(u.submission.formMethod)))return void $(c,{matches:p});var g,b;S=new AbortController;let w,R,D=we(e.history,c,S.signal,u&&u.submission);if(u&&u.pendingError)R={[Se(p).route.id]:u.pendingError};else if(u&&u.submission&&Me(u.submission.formMethod)){let e=await async function(e,r,o,s,c){let u;V(),K({navigation:i({state:"submitting",location:r},o)});let d=Be(s,r);if(d.route.action||d.route.lazy){if(u=await be("action",e,d,s,a,t,l),e.signal.aborted)return{shortCircuited:!0}}else u={type:y.error,error:Ce(405,{method:e.method,pathname:r.pathname,routeId:d.route.id})};if(Ue(u)){let e;return e=c&&null!=c.replace?c.replace:u.location===C.location.pathname+C.location.search,await q(C,u,{submission:o,replace:e}),{shortCircuited:!0}}if(Le(u)){let e=Se(s,d.route.id);return!0!==(c&&c.replace)&&(P=n.Push),{pendingActionData:{},pendingActionError:{[e.route.id]:u.error}}}if(ke(u))throw Ce(400,{type:"defer-action"});return{pendingActionData:{[d.route.id]:u.data}}}(D,c,u.submission,p,{replace:u.replace});if(e.shortCircuited)return;w=e.pendingActionData,R=e.pendingActionError,h=i({state:"loading",location:c},u.submission),D=new Request(D.url,{signal:D.signal})}let{shortCircuited:x,loaderData:T,errors:B}=await async function(t,n,a,s,c,u,d,h,f){let p=s;p||(p=i({state:"loading",location:n,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},c));let m=c||u?c||u:p.formMethod&&p.formAction&&p.formData&&p.formEncType?{formMethod:p.formMethod,formAction:p.formAction,formData:p.formData,formEncType:p.formEncType}:void 0,v=r||o,[g,y]=me(e.history,C,a,m,n,L,U,M,N,v,l,h,f);if(ve((e=>!(a&&a.some((t=>t.route.id===e)))||g&&g.some((t=>t.route.id===e)))),0===g.length&&0===y.length){let e=ee();return $(n,i({matches:a,loaderData:{},errors:f||null},h?{actionData:h}:{},e?{fetchers:new Map(C.fetchers)}:{})),{shortCircuited:!0}}if(!k){y.forEach((e=>{let t=C.fetchers.get(e.key),r={state:"loading",data:t&&t.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};C.fetchers.set(e.key,r)}));let e=h||C.actionData;K(i({navigation:p},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},y.length>0?{fetchers:new Map(C.fetchers)}:{}))}j=++_,y.forEach((e=>{e.controller&&O.set(e.key,e.controller)}));let b=()=>y.forEach((e=>Q(e.key)));S&&S.signal.addEventListener("abort",b);let{results:w,loaderResults:E,fetcherResults:R}=await Y(C.matches,a,g,y,t);if(t.signal.aborted)return{shortCircuited:!0};S&&S.signal.removeEventListener("abort",b),y.forEach((e=>O.delete(e.key)));let D=Pe(w);if(D)return await q(C,D,{replace:d}),{shortCircuited:!0};let{loaderData:x,errors:P}=Re(C,a,g,E,f,y,R,I);I.forEach(((e,t)=>{e.subscribe((r=>{(r||e.done)&&I.delete(t)}))}));let A=ee(),T=te(j);return i({loaderData:x,errors:P},A||T||y.length>0?{fetchers:new Map(C.fetchers)}:{})}(D,c,p,h,u&&u.submission,u&&u.fetcherSubmission,u&&u.replace,w,R);x||(S=null,$(c,i({matches:p},w?{actionData:w}:{},{loaderData:T,errors:B})))}function J(e){return C.fetchers.get(e)||ie}async function q(t,r,a){var o;let{submission:s,replace:c,isFetchActionRedirect:u}=void 0===a?{}:a;r.revalidate&&(L=!0);let h=p(t.location,r.location,i({_isRedirect:!0},u?{_isFetchActionRedirect:!0}:{}));if(d(h,"Expected a location on the redirect navigation"),se.test(r.location)&&ce&&void 0!==(null==(o=window)?void 0:o.location)){let t=e.history.createURL(r.location),n=null==T(t.pathname,l);if(window.location.origin!==t.origin||n)return void(c?window.location.replace(r.location):window.location.assign(r.location))}S=null;let f=!0===c?n.Replace:n.Push,{formMethod:m,formAction:v,formEncType:g,formData:y}=t.navigation;!s&&m&&v&&y&&g&&(s={formMethod:m,formAction:v,formEncType:g,formData:y}),ae.has(r.status)&&s&&Me(s.formMethod)?await H(f,h,{submission:i({},s,{formAction:r.location}),preventScrollReset:A}):u?await H(f,h,{overrideNavigation:{state:"loading",location:h,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},fetcherSubmission:s,preventScrollReset:A}):await H(f,h,{overrideNavigation:{state:"loading",location:h,formMethod:s?s.formMethod:void 0,formAction:s?s.formAction:void 0,formEncType:s?s.formEncType:void 0,formData:s?s.formData:void 0},preventScrollReset:A})}async function Y(r,n,o,i,s){let c=await Promise.all([...o.map((e=>be("loader",s,e,n,a,t,l))),...i.map((r=>r.matches&&r.match&&r.controller?be("loader",we(e.history,r.path,r.controller.signal),r.match,r.matches,a,t,l):{type:y.error,error:Ce(404,{pathname:r.path})}))]),u=c.slice(0,o.length),d=c.slice(o.length);return await Promise.all([Oe(r,o,u,u.map((()=>s.signal)),!1,C.loaderData),Oe(r,i.map((e=>e.match)),d,i.map((e=>e.controller?e.controller.signal:null)),!0)]),{results:c,loaderResults:u,fetcherResults:d}}function V(){L=!0,U.push(...ve()),N.forEach(((e,t)=>{O.has(t)&&(M.push(t),Q(t))}))}function X(e,t,r){let n=Se(C.matches,t);G(e),K({errors:{[n.route.id]:r},fetchers:new Map(C.fetchers)})}function G(e){O.has(e)&&Q(e),N.delete(e),B.delete(e),F.delete(e),C.fetchers.delete(e)}function Q(e){let t=O.get(e);d(t,"Expected fetch controller: "+e),t.abort(),O.delete(e)}function Z(e){for(let t of e){let e={state:"idle",data:J(t).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};C.fetchers.set(t,e)}}function ee(){let e=[],t=!1;for(let r of F){let n=C.fetchers.get(r);d(n,"Expected fetcher: "+r),"loading"===n.state&&(F.delete(r),e.push(r),t=!0)}return Z(e),t}function te(e){let t=[];for(let[r,n]of B)if(n<e){let e=C.fetchers.get(r);d(e,"Expected fetcher: "+r),"loading"===e.state&&(Q(r),B.delete(r),t.push(r))}return Z(t),t.length>0}function re(e){C.blockers.delete(e),z.delete(e)}function ne(e,t){let r=C.blockers.get(e)||le;d("unblocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"proceeding"===t.state||"blocked"===r.state&&"unblocked"===t.state||"proceeding"===r.state&&"unblocked"===t.state,"Invalid blocker state transition: "+r.state+" -> "+t.state),C.blockers.set(e,t),K({blockers:new Map(C.blockers)})}function he(e){let{currentLocation:t,nextLocation:r,historyAction:n}=e;if(0===z.size)return;z.size>1&&h(!1,"A router only supports one blocker at a time");let a=Array.from(z.entries()),[o,i]=a[a.length-1],l=C.blockers.get(o);return l&&"proceeding"===l.state?void 0:i({currentLocation:t,nextLocation:r,historyAction:n})?o:void 0}function ve(e){let t=[];return I.forEach(((r,n)=>{e&&!e(n)||(r.cancel(),t.push(n),I.delete(n))})),t}function ge(e,t){if(f&&m&&v){let r=t.map((e=>Te(e,C.loaderData))),n=m(e,r)||e.key,a=f[n];if("number"==typeof a)return a}return null}return D={get basename(){return l},get state(){return C},get routes(){return o},initialize:function(){return c=e.history.listen((t=>{let{action:r,location:n,delta:a}=t;if(W)return void(W=!1);h(0===z.size||null!=a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=he({currentLocation:C.location,nextLocation:n,historyAction:r});return o&&null!=a?(W=!0,e.history.go(-1*a),void ne(o,{state:"blocked",location:n,proceed(){ne(o,{state:"proceeding",proceed:void 0,reset:void 0,location:n}),e.history.go(a)},reset(){re(o),K({blockers:new Map(D.state.blockers)})}})):H(r,n)})),C.initialized||H(n.Pop,C.location),D},subscribe:function(e){return u.add(e),()=>u.delete(e)},enableScrollRestoration:function(e,t,r){if(f=e,v=t,m=r||(e=>e.key),!g&&C.navigation===oe){g=!0;let e=ge(C.location,C.matches);null!=e&&K({restoreScrollPosition:e})}return()=>{f=null,v=null,m=null}},navigate:async function t(r,a){if("number"==typeof r)return void e.history.go(r);let o=fe(C.location,C.matches,l,s.v7_prependBasename,r,null==a?void 0:a.fromRouteId,null==a?void 0:a.relative),{path:c,submission:u,error:d}=pe(s.v7_normalizeFormMethod,!1,o,a),h=C.location,f=p(C.location,c,a&&a.state);f=i({},f,e.history.encodeLocation(f));let m=a&&null!=a.replace?a.replace:void 0,v=n.Push;!0===m?v=n.Replace:!1===m||null!=u&&Me(u.formMethod)&&u.formAction===C.location.pathname+C.location.search&&(v=n.Replace);let g=a&&"preventScrollReset"in a?!0===a.preventScrollReset:void 0,y=he({currentLocation:h,nextLocation:f,historyAction:v});if(!y)return await H(v,f,{submission:u,pendingError:d,preventScrollReset:g,replace:a&&a.replace});ne(y,{state:"blocked",location:f,proceed(){ne(y,{state:"proceeding",proceed:void 0,reset:void 0,location:f}),t(r,a)},reset(){re(y),K({blockers:new Map(C.blockers)})}})},fetch:function(n,c,u,h){if(ue)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");O.has(n)&&Q(n);let f=r||o,p=fe(C.location,C.matches,l,s.v7_prependBasename,u,c,null==h?void 0:h.relative),m=E(f,p,l);if(!m)return void X(n,c,Ce(404,{pathname:p}));let{path:v,submission:g}=pe(s.v7_normalizeFormMethod,!0,p,h),y=Be(m,v);A=!0===(h&&h.preventScrollReset),g&&Me(g.formMethod)?async function(n,s,c,u,h,f){if(V(),N.delete(n),!u.route.action&&!u.route.lazy){let e=Ce(405,{method:f.formMethod,pathname:c,routeId:s});return void X(n,s,e)}let p=C.fetchers.get(n),m=i({state:"submitting"},f,{data:p&&p.data," _hasFetcherDoneAnything ":!0});C.fetchers.set(n,m),K({fetchers:new Map(C.fetchers)});let v=new AbortController,g=we(e.history,c,v.signal,f);O.set(n,v);let y=await be("action",g,u,h,a,t,l);if(g.signal.aborted)return void(O.get(n)===v&&O.delete(n));if(Ue(y)){O.delete(n),F.add(n);let e=i({state:"loading"},f,{data:void 0," _hasFetcherDoneAnything ":!0});return C.fetchers.set(n,e),K({fetchers:new Map(C.fetchers)}),q(C,y,{submission:f,isFetchActionRedirect:!0})}if(Le(y))return void X(n,s,y.error);if(ke(y))throw Ce(400,{type:"defer-action"});let b=C.navigation.location||C.location,w=we(e.history,b,v.signal),R=r||o,D="idle"!==C.navigation.state?E(R,C.navigation.location,l):C.matches;d(D,"Didn't find any matches after fetcher action");let x=++_;B.set(n,x);let A=i({state:"loading",data:y.data},f,{" _hasFetcherDoneAnything ":!0});C.fetchers.set(n,A);let[k,T]=me(e.history,C,D,f,b,L,U,M,N,R,l,{[u.route.id]:y.data},void 0);T.filter((e=>e.key!==n)).forEach((e=>{let t=e.key,r=C.fetchers.get(t),n={state:"loading",data:r&&r.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};C.fetchers.set(t,n),e.controller&&O.set(t,e.controller)})),K({fetchers:new Map(C.fetchers)});let z=()=>T.forEach((e=>Q(e.key)));v.signal.addEventListener("abort",z);let{results:W,loaderResults:H,fetcherResults:J}=await Y(C.matches,D,k,T,w);if(v.signal.aborted)return;v.signal.removeEventListener("abort",z),B.delete(n),O.delete(n),T.forEach((e=>O.delete(e.key)));let G=Pe(W);if(G)return q(C,G);let{loaderData:Z,errors:ee}=Re(C,C.matches,k,H,void 0,T,J,I),re={state:"idle",data:y.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};C.fetchers.set(n,re);let ne=te(x);"loading"===C.navigation.state&&x>j?(d(P,"Expected pending action"),S&&S.abort(),$(C.navigation.location,{matches:D,loaderData:Z,errors:ee,fetchers:new Map(C.fetchers)})):(K(i({errors:ee,loaderData:De(C.loaderData,Z,D,ee)},ne?{fetchers:new Map(C.fetchers)}:{})),L=!1)}(n,c,v,y,m,g):(N.set(n,{routeId:c,path:v}),async function(r,n,o,s,c,u){let h=C.fetchers.get(r),f=i({state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},u,{data:h&&h.data," _hasFetcherDoneAnything ":!0});C.fetchers.set(r,f),K({fetchers:new Map(C.fetchers)});let p=new AbortController,m=we(e.history,o,p.signal);O.set(r,p);let v=await be("loader",m,s,c,a,t,l);if(ke(v)&&(v=await _e(v,m.signal,!0)||v),O.get(r)===p&&O.delete(r),m.signal.aborted)return;if(Ue(v))return F.add(r),void await q(C,v);if(Le(v)){let e=Se(C.matches,n);return C.fetchers.delete(r),void K({fetchers:new Map(C.fetchers),errors:{[e.route.id]:v.error}})}d(!ke(v),"Unhandled fetcher deferred data");let g={state:"idle",data:v.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};C.fetchers.set(r,g),K({fetchers:new Map(C.fetchers)})}(n,c,v,y,m,g))},revalidate:function(){V(),K({revalidation:"loading"}),"submitting"!==C.navigation.state&&("idle"!==C.navigation.state?H(P||C.historyAction,C.navigation.location,{overrideNavigation:C.navigation}):H(C.historyAction,C.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:J,deleteFetcher:G,dispose:function(){c&&c(),u.clear(),S&&S.abort(),C.fetchers.forEach(((e,t)=>G(t))),C.blockers.forEach(((e,t)=>re(t)))},getBlocker:function(e,t){let r=C.blockers.get(e)||le;return z.get(e)!==t&&z.set(e,t),r},deleteBlocker:re,_internalFetchControllers:O,_internalActiveDeferreds:I,_internalSetRoutes:function(e){r=e}},D}function fe(e,t,r,n,a,o,i){let l,s;if(null!=o&&"path"!==i){l=[];for(let e of t)if(l.push(e),e.route.id===o){s=e;break}}else l=t,s=t[t.length-1];let c=I(a||".",N(l).map((e=>e.pathnameBase)),T(e.pathname,r)||e.pathname,"path"===i);return null==a&&(c.search=e.search,c.hash=e.hash),null!=a&&""!==a&&"."!==a||!s||!s.route.index||je(c.search)||(c.search=c.search?c.search.replace(/^\?/,"?index&"):"?index"),n&&"/"!==r&&(c.pathname="/"===c.pathname?r:z([r,c.pathname])),m(c)}function pe(e,t,r,n){if(!n||!function(e){return null!=e&&"formData"in e}(n))return{path:r};if(n.formMethod&&(a=n.formMethod,!re.has(a.toLowerCase())))return{path:r,error:Ce(405,{method:n.formMethod})};var a;let o;if(n.formData){let t=n.formMethod||"get";if(o={formMethod:e?t.toUpperCase():t.toLowerCase(),formAction:Ae(r),formEncType:n&&n.formEncType||"application/x-www-form-urlencoded",formData:n.formData},Me(o.formMethod))return{path:r,submission:o}}let i=v(r),l=Ee(n.formData);return t&&i.search&&je(i.search)&&l.append("index",""),i.search="?"+l,{path:m(i),submission:o}}function me(e,t,r,n,a,o,l,s,c,u,d,h,f){let p=f?Object.values(f)[0]:h?Object.values(h)[0]:void 0,m=e.createURL(t.location),v=e.createURL(a),g=f?Object.keys(f)[0]:void 0,y=function(e,t){let r=e;if(t){let n=e.findIndex((e=>e.route.id===t));n>=0&&(r=e.slice(0,n))}return r}(r,g).filter(((e,r)=>{if(e.route.lazy)return!0;if(null==e.route.loader)return!1;if(function(e,t,r){let n=!t||r.route.id!==t.route.id,a=void 0===e[r.route.id];return n||a}(t.loaderData,t.matches[r],e)||l.some((t=>t===e.route.id)))return!0;let a=t.matches[r],s=e;return ge(e,i({currentUrl:m,currentParams:a.params,nextUrl:v,nextParams:s.params},n,{actionResult:p,defaultShouldRevalidate:o||m.pathname+m.search===v.pathname+v.search||m.search!==v.search||ve(a,s)}))})),b=[];return c.forEach(((e,a)=>{if(!r.some((t=>t.route.id===e.routeId)))return;let l=E(u,e.path,d);if(!l)return void b.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let c=Be(l,e.path);(s.includes(a)||ge(c,i({currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:v,nextParams:r[r.length-1].params},n,{actionResult:p,defaultShouldRevalidate:o})))&&b.push({key:a,routeId:e.routeId,path:e.path,matches:l,match:c,controller:new AbortController})})),[y,b]}function ve(e,t){let r=e.route.path;return e.pathname!==t.pathname||null!=r&&r.endsWith("*")&&e.params["*"]!==t.params["*"]}function ge(e,t){if(e.route.shouldRevalidate){let r=e.route.shouldRevalidate(t);if("boolean"==typeof r)return r}return t.defaultShouldRevalidate}async function ye(e,t,r){if(!e.lazy)return;let n=await e.lazy();if(!e.lazy)return;let a=r[e.id];d(a,"No route found in manifest");let o={};for(let e in n){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;h(!t,'Route "'+a.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||b.has(e)||(o[e]=n[e])}Object.assign(a,o),Object.assign(a,i({},t(a),{lazy:void 0}))}async function be(e,t,r,n,a,o,i,l,s,c){let u,h,f;void 0===l&&(l=!1),void 0===s&&(s=!1);let p=e=>{let n,a=new Promise(((e,t)=>n=t));return f=()=>n(),t.signal.addEventListener("abort",f),Promise.race([e({request:t,params:r.params,context:c}),a])};try{let n=r.route[e];if(r.route.lazy)if(n)h=(await Promise.all([p(n),ye(r.route,o,a)]))[0];else{if(await ye(r.route,o,a),n=r.route[e],!n){if("action"===e){let e=new URL(t.url),n=e.pathname+e.search;throw Ce(405,{method:t.method,pathname:n,routeId:r.route.id})}return{type:y.data,data:void 0}}h=await p(n)}else{if(!n){let e=new URL(t.url);throw Ce(404,{pathname:e.pathname+e.search})}h=await p(n)}d(void 0!==h,"You defined "+("action"===e?"an action":"a loader")+' for route "'+r.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){u=y.error,h=e}finally{f&&t.signal.removeEventListener("abort",f)}if(null!=(m=h)&&"number"==typeof m.status&&"string"==typeof m.statusText&&"object"==typeof m.headers&&void 0!==m.body){let e,a=h.status;if(ne.has(a)){let e=h.headers.get("Location");if(d(e,"Redirects returned/thrown from loaders/actions must have a Location header"),se.test(e)){if(!l){let r=new URL(t.url),n=e.startsWith("//")?new URL(r.protocol+e):new URL(e),a=null!=T(n.pathname,i);n.origin===r.origin&&a&&(e=n.pathname+n.search+n.hash)}}else e=fe(new URL(t.url),n.slice(0,n.indexOf(r)+1),i,!0,e);if(l)throw h.headers.set("Location",e),h;return{type:y.redirect,status:a,location:e,revalidate:null!==h.headers.get("X-Remix-Revalidate")}}if(s)throw{type:u||y.data,response:h};let o=h.headers.get("Content-Type");return e=o&&/\bapplication\/json\b/.test(o)?await h.json():await h.text(),u===y.error?{type:u,error:new G(a,h.statusText,e),headers:h.headers}:{type:y.data,data:e,statusCode:h.status,headers:h.headers}}var m,v,g;return u===y.error?{type:u,error:h}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(h)?{type:y.deferred,deferredData:h,statusCode:null==(v=h.init)?void 0:v.status,headers:(null==(g=h.init)?void 0:g.headers)&&new Headers(h.init.headers)}:{type:y.data,data:h}}function we(e,t,r,n){let a=e.createURL(Ae(t)).toString(),o={signal:r};if(n&&Me(n.formMethod)){let{formMethod:e,formEncType:t,formData:r}=n;o.method=e.toUpperCase(),o.body="application/x-www-form-urlencoded"===t?Ee(r):r}return new Request(a,o)}function Ee(e){let t=new URLSearchParams;for(let[r,n]of e.entries())t.append(r,n instanceof File?n.name:n);return t}function Re(e,t,r,n,a,o,l,s){let{loaderData:c,errors:u}=function(e,t,r,n,a){let o,i={},l=null,s=!1,c={};return r.forEach(((r,u)=>{let h=t[u].route.id;if(d(!Ue(r),"Cannot handle redirect results in processLoaderData"),Le(r)){let t=Se(e,h),a=r.error;n&&(a=Object.values(n)[0],n=void 0),l=l||{},null==l[t.route.id]&&(l[t.route.id]=a),i[h]=void 0,s||(s=!0,o=Q(r.error)?r.error.status:500),r.headers&&(c[h]=r.headers)}else ke(r)?(a.set(h,r.deferredData),i[h]=r.deferredData.data):i[h]=r.data,null==r.statusCode||200===r.statusCode||s||(o=r.statusCode),r.headers&&(c[h]=r.headers)})),n&&(l=n,i[Object.keys(n)[0]]=void 0),{loaderData:i,errors:l,statusCode:o||200,loaderHeaders:c}}(t,r,n,a,s);for(let t=0;t<o.length;t++){let{key:r,match:n,controller:a}=o[t];d(void 0!==l&&void 0!==l[t],"Did not find corresponding fetcher result");let s=l[t];if(!a||!a.signal.aborted)if(Le(s)){let t=Se(e.matches,null==n?void 0:n.route.id);u&&u[t.route.id]||(u=i({},u,{[t.route.id]:s.error})),e.fetchers.delete(r)}else if(Ue(s))d(!1,"Unhandled fetcher revalidation redirect");else if(ke(s))d(!1,"Unhandled fetcher deferred data");else{let t={state:"idle",data:s.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0," _hasFetcherDoneAnything ":!0};e.fetchers.set(r,t)}}return{loaderData:c,errors:u}}function De(e,t,r,n){let a=i({},t);for(let o of r){let r=o.route.id;if(t.hasOwnProperty(r)?void 0!==t[r]&&(a[r]=t[r]):void 0!==e[r]&&o.route.loader&&(a[r]=e[r]),n&&n.hasOwnProperty(r))break}return a}function Se(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function xe(e){let t=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Ce(e,t){let{pathname:r,routeId:n,method:a,type:o}=void 0===t?{}:t,i="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(i="Bad Request",a&&r&&n?l="You made a "+a+' request to "'+r+'" but did not provide a `loader` for route "'+n+'", so there is no way to handle the request.':"defer-action"===o&&(l="defer() is not supported in actions")):403===e?(i="Forbidden",l='Route "'+n+'" does not match URL "'+r+'"'):404===e?(i="Not Found",l='No route matches URL "'+r+'"'):405===e&&(i="Method Not Allowed",a&&r&&n?l="You made a "+a.toUpperCase()+' request to "'+r+'" but did not provide an `action` for route "'+n+'", so there is no way to handle the request.':a&&(l='Invalid request method "'+a.toUpperCase()+'"')),new G(e||500,i,new Error(l),!0)}function Pe(e){for(let t=e.length-1;t>=0;t--){let r=e[t];if(Ue(r))return r}}function Ae(e){return m(i({},"string"==typeof e?v(e):e,{hash:""}))}function ke(e){return e.type===y.deferred}function Le(e){return e.type===y.error}function Ue(e){return(e&&e.type)===y.redirect}function Me(e){return ee.has(e.toLowerCase())}async function Oe(e,t,r,n,a,o){for(let i=0;i<r.length;i++){let l=r[i],s=t[i];if(!s)continue;let c=e.find((e=>e.route.id===s.route.id)),u=null!=c&&!ve(c,s)&&void 0!==(o&&o[s.route.id]);if(ke(l)&&(a||u)){let e=n[i];d(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await _e(l,e,a).then((e=>{e&&(r[i]=e||r[i])}))}}}async function _e(e,t,r){if(void 0===r&&(r=!1),!await e.deferredData.resolveData(t)){if(r)try{return{type:y.data,data:e.deferredData.unwrappedData}}catch(e){return{type:y.error,error:e}}return{type:y.data,data:e.deferredData.data}}}function je(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Te(e,t){let{route:r,pathname:n,params:a}=e;return{id:r.id,pathname:n,params:a,data:t[r.id],handle:r.handle}}function Be(e,t){let r="string"==typeof t?v(t).search:t.search;if(e[e.length-1].route.index&&je(r||""))return e[e.length-1];let n=N(e);return n[n.length-1]}Symbol("deferred");var Fe=r(5108);function Ne(){return Ne=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Ne.apply(this,arguments)}const Ie=a.createContext(null),ze=a.createContext(null),We=a.createContext(null),Ke=a.createContext(null),$e=a.createContext(null),He=a.createContext({outlet:null,matches:[],isDataRoute:!1}),Je=a.createContext(null);function qe(e,t){let{relative:r}=void 0===t?{}:t;Ye()||d(!1);let{basename:n,navigator:o}=a.useContext(Ke),{hash:i,pathname:l,search:s}=at(e,{relative:r}),c=l;return"/"!==n&&(c="/"===l?n:z([n,l])),o.createHref({pathname:c,search:s,hash:i})}function Ye(){return null!=a.useContext($e)}function Ve(){return Ye()||d(!1),a.useContext($e).location}function Xe(){return a.useContext($e).navigationType}function Ge(e){Ye()||d(!1);let{pathname:t}=Ve();return a.useMemo((()=>_(e,t)),[t,e])}function Qe(e){a.useContext(Ke).static||a.useLayoutEffect(e)}function Ze(){let{isDataRoute:e}=a.useContext(He);return e?function(){let{router:e}=pt(ht.UseNavigateStable),t=vt(ft.UseNavigateStable),r=a.useRef(!1);return Qe((()=>{r.current=!0})),a.useCallback((function(n,a){void 0===a&&(a={}),r.current&&("number"==typeof n?e.navigate(n):e.navigate(n,Ne({fromRouteId:t},a)))}),[e,t])}():function(){Ye()||d(!1);let{basename:e,navigator:t}=a.useContext(Ke),{matches:r}=a.useContext(He),{pathname:n}=Ve(),o=JSON.stringify(N(r).map((e=>e.pathnameBase))),i=a.useRef(!1);return Qe((()=>{i.current=!0})),a.useCallback((function(r,a){if(void 0===a&&(a={}),!i.current)return;if("number"==typeof r)return void t.go(r);let l=I(r,JSON.parse(o),n,"path"===a.relative);"/"!==e&&(l.pathname="/"===l.pathname?e:z([e,l.pathname])),(a.replace?t.replace:t.push)(l,a.state,a)}),[e,t,o,n])}()}const et=a.createContext(null);function tt(){return a.useContext(et)}function rt(e){let t=a.useContext(He).outlet;return t?a.createElement(et.Provider,{value:e},t):t}function nt(){let{matches:e}=a.useContext(He),t=e[e.length-1];return t?t.params:{}}function at(e,t){let{relative:r}=void 0===t?{}:t,{matches:n}=a.useContext(He),{pathname:o}=Ve(),i=JSON.stringify(N(n).map((e=>e.pathnameBase)));return a.useMemo((()=>I(e,JSON.parse(i),o,"path"===r)),[e,i,o,r])}function ot(e,t){return it(e,t)}function it(e,t,r){Ye()||d(!1);let{navigator:o}=a.useContext(Ke),{matches:i}=a.useContext(He),l=i[i.length-1],s=l?l.params:{},c=(l&&l.pathname,l?l.pathnameBase:"/");l&&l.route;let u,h=Ve();if(t){var f;let e="string"==typeof t?v(t):t;"/"===c||(null==(f=e.pathname)?void 0:f.startsWith(c))||d(!1),u=e}else u=h;let p=u.pathname||"/",m=E(e,{pathname:"/"===c?p:p.slice(c.length)||"/"}),g=dt(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:z([c,o.encodeLocation?o.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:z([c,o.encodeLocation?o.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,r);return t&&g?a.createElement($e.Provider,{value:{location:Ne({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:n.Pop}},g):g}function lt(){let e=St(),t=Q(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,n={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return a.createElement(a.Fragment,null,a.createElement("h2",null,"Unexpected Application Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},t),r?a.createElement("pre",{style:n},r):null,null)}const st=a.createElement(lt,null);class ct extends a.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){Fe.error("React Router caught the following error during render",e,t)}render(){return this.state.error?a.createElement(He.Provider,{value:this.props.routeContext},a.createElement(Je.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function ut(e){let{routeContext:t,match:r,children:n}=e,o=a.useContext(Ie);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),a.createElement(He.Provider,{value:t},n)}function dt(e,t,r){var n;if(void 0===t&&(t=[]),void 0===r&&(r=null),null==e){var o;if(null==(o=r)||!o.errors)return null;e=r.matches}let i=e,l=null==(n=r)?void 0:n.errors;if(null!=l){let e=i.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||d(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,n,o)=>{let s=n.route.id?null==l?void 0:l[n.route.id]:null,c=null;r&&(c=n.route.errorElement||st);let u=t.concat(i.slice(0,o+1)),d=()=>{let t;return t=s?c:n.route.Component?a.createElement(n.route.Component,null):n.route.element?n.route.element:e,a.createElement(ut,{match:n,routeContext:{outlet:e,matches:u,isDataRoute:null!=r},children:t})};return r&&(n.route.ErrorBoundary||n.route.errorElement||0===o)?a.createElement(ct,{location:r.location,revalidation:r.revalidation,component:c,error:s,children:d(),routeContext:{outlet:null,matches:u,isDataRoute:!0}}):d()}),null)}var ht,ft;function pt(e){let t=a.useContext(Ie);return t||d(!1),t}function mt(e){let t=a.useContext(ze);return t||d(!1),t}function vt(e){let t=function(e){let t=a.useContext(He);return t||d(!1),t}(),r=t.matches[t.matches.length-1];return r.route.id||d(!1),r.route.id}function gt(){return vt(ft.UseRouteId)}function yt(){return mt(ft.UseNavigation).navigation}function bt(){let e=pt(ht.UseRevalidator),t=mt(ft.UseRevalidator);return{revalidate:e.router.revalidate,state:t.revalidation}}function wt(){let{matches:e,loaderData:t}=mt(ft.UseMatches);return a.useMemo((()=>e.map((e=>{let{pathname:r,params:n}=e;return{id:e.route.id,pathname:r,params:n,data:t[e.route.id],handle:e.route.handle}}))),[e,t])}function Et(){let e=mt(ft.UseLoaderData),t=vt(ft.UseLoaderData);if(!e.errors||null==e.errors[t])return e.loaderData[t];Fe.error("You cannot `useLoaderData` in an errorElement (routeId: "+t+")")}function Rt(e){return mt(ft.UseRouteLoaderData).loaderData[e]}function Dt(){let e=mt(ft.UseActionData);return a.useContext(He)||d(!1),Object.values((null==e?void 0:e.actionData)||{})[0]}function St(){var e;let t=a.useContext(Je),r=mt(ft.UseRouteError),n=vt(ft.UseRouteError);return t||(null==(e=r.errors)?void 0:e[n])}function xt(){let e=a.useContext(We);return null==e?void 0:e._data}function Ct(){let e=a.useContext(We);return null==e?void 0:e._error}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate"}(ht||(ht={})),function(e){e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId"}(ft||(ft={}));let Pt=0;function At(e){let{router:t}=pt(ht.UseBlocker),r=mt(ft.UseBlocker),[n]=a.useState((()=>String(++Pt))),o=a.useCallback((t=>"function"==typeof e?!!e(t):!!e),[e]),i=t.getBlocker(n,o);return a.useEffect((()=>()=>t.deleteBlocker(n)),[t,n]),r.blockers.get(n)||i}function kt(e){let{fallbackElement:t,router:r}=e,[n,o]=a.useState(r.state);a.useLayoutEffect((()=>r.subscribe(o)),[r,o]);let i=a.useMemo((()=>({createHref:r.createHref,encodeLocation:r.encodeLocation,go:e=>r.navigate(e),push:(e,t,n)=>r.navigate(e,{state:t,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(e,t,n)=>r.navigate(e,{replace:!0,state:t,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[r]),l=r.basename||"/",s=a.useMemo((()=>({router:r,navigator:i,static:!1,basename:l})),[r,i,l]);return a.createElement(a.Fragment,null,a.createElement(Ie.Provider,{value:s},a.createElement(ze.Provider,{value:n},a.createElement(jt,{basename:r.basename,location:r.state.location,navigationType:r.state.historyAction,navigator:i},r.state.initialized?a.createElement(Lt,{routes:r.routes,state:n}):t))),null)}function Lt(e){let{routes:t,state:r}=e;return it(t,void 0,r)}function Ut(e){let{basename:t,children:r,initialEntries:n,initialIndex:o}=e,i=a.useRef();null==i.current&&(i.current=s({initialEntries:n,initialIndex:o,v5Compat:!0}));let l=i.current,[c,u]=a.useState({action:l.action,location:l.location});return a.useLayoutEffect((()=>l.listen(u)),[l]),a.createElement(jt,{basename:t,children:r,location:c.location,navigationType:c.action,navigator:l})}function Mt(e){let{to:t,replace:r,state:n,relative:o}=e;Ye()||d(!1);let{matches:i}=a.useContext(He),{pathname:l}=Ve(),s=Ze(),c=I(t,N(i).map((e=>e.pathnameBase)),l,"path"===o),u=JSON.stringify(c);return a.useEffect((()=>s(JSON.parse(u),{replace:r,state:n,relative:o})),[s,u,o,r,n]),null}function Ot(e){return rt(e.context)}function _t(e){d(!1)}function jt(e){let{basename:t="/",children:r=null,location:o,navigationType:i=n.Pop,navigator:l,static:s=!1}=e;Ye()&&d(!1);let c=t.replace(/^\/*/,"/"),u=a.useMemo((()=>({basename:c,navigator:l,static:s})),[c,l,s]);"string"==typeof o&&(o=v(o));let{pathname:h="/",search:f="",hash:p="",state:m=null,key:g="default"}=o,y=a.useMemo((()=>{let e=T(h,c);return null==e?null:{location:{pathname:e,search:f,hash:p,state:m,key:g},navigationType:i}}),[c,h,f,p,m,g,i]);return null==y?null:a.createElement(Ke.Provider,{value:u},a.createElement($e.Provider,{children:r,value:y}))}function Tt(e){let{children:t,location:r}=e;return ot(Wt(t),r)}function Bt(e){let{children:t,errorElement:r,resolve:n}=e;return a.createElement(It,{resolve:n,errorElement:r},a.createElement(zt,null,t))}var Ft;!function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(Ft||(Ft={}));const Nt=new Promise((()=>{}));class It extends a.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){Fe.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:r}=this.props,n=null,o=Ft.pending;if(r instanceof Promise)if(this.state.error){o=Ft.error;let e=this.state.error;n=Promise.reject().catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),Object.defineProperty(n,"_error",{get:()=>e})}else r._tracked?(n=r,o=void 0!==n._error?Ft.error:void 0!==n._data?Ft.success:Ft.pending):(o=Ft.pending,Object.defineProperty(r,"_tracked",{get:()=>!0}),n=r.then((e=>Object.defineProperty(r,"_data",{get:()=>e})),(e=>Object.defineProperty(r,"_error",{get:()=>e}))));else o=Ft.success,n=Promise.resolve(),Object.defineProperty(n,"_tracked",{get:()=>!0}),Object.defineProperty(n,"_data",{get:()=>r});if(o===Ft.error&&n._error instanceof J)throw Nt;if(o===Ft.error&&!t)throw n._error;if(o===Ft.error)return a.createElement(We.Provider,{value:n,children:t});if(o===Ft.success)return a.createElement(We.Provider,{value:n,children:e});throw n}}function zt(e){let{children:t}=e,r=xt(),n="function"==typeof t?t(r):t;return a.createElement(a.Fragment,null,n)}function Wt(e,t){void 0===t&&(t=[]);let r=[];return a.Children.forEach(e,((e,n)=>{if(!a.isValidElement(e))return;let o=[...t,n];if(e.type===a.Fragment)return void r.push.apply(r,Wt(e.props.children,o));e.type!==_t&&d(!1),e.props.index&&e.props.children&&d(!1);let i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=Wt(e.props.children,o)),r.push(i)})),r}function Kt(e){return dt(e)}function $t(e){let t={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(t,{element:a.createElement(e.Component),Component:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:a.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t}function Ht(e,t){return he({basename:null==t?void 0:t.basename,future:Ne({},null==t?void 0:t.future,{v7_prependBasename:!0}),history:s({initialEntries:null==t?void 0:t.initialEntries,initialIndex:null==t?void 0:t.initialIndex}),hydrationData:null==t?void 0:t.hydrationData,routes:e,mapRouteProperties:$t}).initialize()}var Jt=r(5108);function qt(){return qt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},qt.apply(this,arguments)}function Yt(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}const Vt="get",Xt="application/x-www-form-urlencoded";function Gt(e){return null!=e&&"string"==typeof e.tagName}function Qt(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,r)=>{let n=e[r];return t.concat(Array.isArray(n)?n.map((e=>[r,e])):[[r,n]])}),[]))}const Zt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],er=["aria-current","caseSensitive","className","end","style","to","children"],tr=["reloadDocument","replace","method","action","onSubmit","fetcherKey","routeId","relative","preventScrollReset"];function rr(e,t){return he({basename:null==t?void 0:t.basename,future:qt({},null==t?void 0:t.future,{v7_prependBasename:!0}),history:c({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||ar(),routes:e,mapRouteProperties:$t}).initialize()}function nr(e,t){return he({basename:null==t?void 0:t.basename,future:qt({},null==t?void 0:t.future,{v7_prependBasename:!0}),history:u({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||ar(),routes:e,mapRouteProperties:$t}).initialize()}function ar(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=qt({},t,{errors:or(t.errors)})),t}function or(e){if(!e)return null;let t=Object.entries(e),r={};for(let[e,n]of t)if(n&&"RouteErrorResponse"===n.__type)r[e]=new G(n.status,n.statusText,n.data,!0===n.internal);else if(n&&"Error"===n.__type){let t=new Error(n.message);t.stack="",r[e]=t}else r[e]=n;return r}function ir(e){let{basename:t,children:r,window:n}=e,o=a.useRef();null==o.current&&(o.current=c({window:n,v5Compat:!0}));let i=o.current,[l,s]=a.useState({action:i.action,location:i.location});return a.useLayoutEffect((()=>i.listen(s)),[i]),a.createElement(jt,{basename:t,children:r,location:l.location,navigationType:l.action,navigator:i})}function lr(e){let{basename:t,children:r,window:n}=e,o=a.useRef();null==o.current&&(o.current=u({window:n,v5Compat:!0}));let i=o.current,[l,s]=a.useState({action:i.action,location:i.location});return a.useLayoutEffect((()=>i.listen(s)),[i]),a.createElement(jt,{basename:t,children:r,location:l.location,navigationType:l.action,navigator:i})}function sr(e){let{basename:t,children:r,history:n}=e;const[o,i]=a.useState({action:n.action,location:n.location});return a.useLayoutEffect((()=>n.listen(i)),[n]),a.createElement(jt,{basename:t,children:r,location:o.location,navigationType:o.action,navigator:n})}const cr="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ur=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,dr=a.forwardRef((function(e,t){let r,{onClick:n,relative:o,reloadDocument:i,replace:l,state:s,target:c,to:u,preventScrollReset:d}=e,h=Yt(e,Zt),{basename:f}=a.useContext(Ke),p=!1;if("string"==typeof u&&ur.test(u)&&(r=u,cr))try{let e=new URL(window.location.href),t=u.startsWith("//")?new URL(e.protocol+u):new URL(u),r=T(t.pathname,f);t.origin===e.origin&&null!=r?u=r+t.search+t.hash:p=!0}catch(e){}let m=qe(u,{relative:o}),v=wr(u,{replace:l,state:s,target:c,preventScrollReset:d,relative:o});return a.createElement("a",qt({},h,{href:r||m,onClick:p||i?n:function(e){n&&n(e),e.defaultPrevented||v(e)},ref:t,target:c}))})),hr=a.forwardRef((function(e,t){let{"aria-current":r="page",caseSensitive:n=!1,className:o="",end:i=!1,style:l,to:s,children:c}=e,u=Yt(e,er),d=at(s,{relative:u.relative}),h=Ve(),f=a.useContext(ze),{navigator:p}=a.useContext(Ke),m=p.encodeLocation?p.encodeLocation(d).pathname:d.pathname,v=h.pathname,g=f&&f.navigation&&f.navigation.location?f.navigation.location.pathname:null;n||(v=v.toLowerCase(),g=g?g.toLowerCase():null,m=m.toLowerCase());let y,b=v===m||!i&&v.startsWith(m)&&"/"===v.charAt(m.length),w=null!=g&&(g===m||!i&&g.startsWith(m)&&"/"===g.charAt(m.length)),E=b?r:void 0;y="function"==typeof o?o({isActive:b,isPending:w}):[o,b?"active":null,w?"pending":null].filter(Boolean).join(" ");let R="function"==typeof l?l({isActive:b,isPending:w}):l;return a.createElement(dr,qt({},u,{"aria-current":E,className:y,ref:t,style:R,to:s}),"function"==typeof c?c({isActive:b,isPending:w}):c)})),fr=a.forwardRef(((e,t)=>a.createElement(pr,qt({},e,{ref:t})))),pr=a.forwardRef(((e,t)=>{let{reloadDocument:r,replace:n,method:o=Vt,action:i,onSubmit:l,fetcherKey:s,routeId:c,relative:u,preventScrollReset:d}=e,h=Yt(e,tr),f=Dr(s,c),p="get"===o.toLowerCase()?"get":"post",m=Sr(i,{relative:u});return a.createElement("form",qt({ref:t,method:p,action:m,onSubmit:r?l:e=>{if(l&&l(e),e.defaultPrevented)return;e.preventDefault();let t=e.nativeEvent.submitter,r=(null==t?void 0:t.getAttribute("formmethod"))||o;f(t||e.currentTarget,{method:r,replace:n,relative:u,preventScrollReset:d})}},h))}));function mr(e){let{getKey:t,storageKey:r}=e;return Lr({getKey:t,storageKey:r}),null}var vr,gr;function yr(e){let t=a.useContext(Ie);return t||d(!1),t}function br(e){let t=a.useContext(ze);return t||d(!1),t}function wr(e,t){let{target:r,replace:n,state:o,preventScrollReset:i,relative:l}=void 0===t?{}:t,s=Ze(),c=Ve(),u=at(e,{relative:l});return a.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let r=void 0!==n?n:m(c)===m(u);s(e,{replace:r,state:o,preventScrollReset:i,relative:l})}}),[c,s,u,n,o,r,e,i,l])}function Er(e){let t=a.useRef(Qt(e)),r=a.useRef(!1),n=Ve(),o=a.useMemo((()=>function(e,t){let r=Qt(e);if(t)for(let e of t.keys())r.has(e)||t.getAll(e).forEach((t=>{r.append(e,t)}));return r}(n.search,r.current?null:t.current)),[n.search]),i=Ze(),l=a.useCallback(((e,t)=>{const n=Qt("function"==typeof e?e(o):e);r.current=!0,i("?"+n,t)}),[i,o]);return[o,l]}function Rr(){return Dr()}function Dr(e,t){let{router:r}=yr(vr.UseSubmitImpl),{basename:n}=a.useContext(Ke),o=gt();return a.useCallback((function(a,i){if(void 0===i&&(i={}),"undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");let{action:l,method:s,encType:c,formData:u}=function(e,t,r){let n,a,o,i=null;if(Gt(l=e)&&"form"===l.tagName.toLowerCase()){let l=t.submissionTrigger;if(t.action)i=t.action;else{let t=e.getAttribute("action");i=t?T(t,r):null}n=t.method||e.getAttribute("method")||Vt,a=t.encType||e.getAttribute("enctype")||Xt,o=new FormData(e),l&&l.name&&o.append(l.name,l.value)}else if(function(e){return Gt(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return Gt(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let l=e.form;if(null==l)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');if(t.action)i=t.action;else{let t=e.getAttribute("formaction")||l.getAttribute("action");i=t?T(t,r):null}n=t.method||e.getAttribute("formmethod")||l.getAttribute("method")||Vt,a=t.encType||e.getAttribute("formenctype")||l.getAttribute("enctype")||Xt,o=new FormData(l),e.name&&o.append(e.name,e.value)}else{if(Gt(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');if(n=t.method||Vt,i=t.action||null,a=t.encType||Xt,e instanceof FormData)o=e;else if(o=new FormData,e instanceof URLSearchParams)for(let[t,r]of e)o.append(t,r);else if(null!=e)for(let t of Object.keys(e))o.append(t,e[t])}var l;return{action:i,method:n.toLowerCase(),encType:a,formData:o}}(a,i,n),h={preventScrollReset:i.preventScrollReset,formData:u,formMethod:s,formEncType:c};e?(null==t&&d(!1),r.fetch(e,t,l,h)):r.navigate(l,qt({},h,{replace:i.replace,fromRouteId:o}))}),[r,n,e,t,o])}function Sr(e,t){let{relative:r}=void 0===t?{}:t,{basename:n}=a.useContext(Ke),o=a.useContext(He);o||d(!1);let[i]=o.matches.slice(-1),l=qt({},at(e||".",{relative:r})),s=Ve();if(null==e&&(l.search=s.search,l.hash=s.hash,i.route.index)){let e=new URLSearchParams(l.search);e.delete("index"),l.search=e.toString()?"?"+e.toString():""}return e&&"."!==e||!i.route.index||(l.search=l.search?l.search.replace(/^\?/,"?index&"):"?index"),"/"!==n&&(l.pathname="/"===l.pathname?n:z([n,l.pathname])),m(l)}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(vr||(vr={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(gr||(gr={}));let xr=0;function Cr(){var e;let{router:t}=yr(vr.UseFetcher),r=a.useContext(He);r||d(!1);let n=null==(e=r.matches[r.matches.length-1])?void 0:e.route.id;null==n&&d(!1);let[o]=a.useState((()=>String(++xr))),[i]=a.useState((()=>(n||d(!1),function(e,t){return a.forwardRef(((r,n)=>a.createElement(pr,qt({},r,{ref:n,fetcherKey:e,routeId:t}))))}(o,n)))),[l]=a.useState((()=>e=>{t||d(!1),n||d(!1),t.fetch(o,n,e)})),s=Dr(o,n),c=t.getFetcher(o),u=a.useMemo((()=>qt({Form:i,submit:s,load:l},c)),[c,i,s,l]);return a.useEffect((()=>()=>{t?t.deleteFetcher(o):Jt.warn("No router available to clean up from useFetcher()")}),[t,o]),u}function Pr(){return[...br(gr.UseFetchers).fetchers.values()]}const Ar="react-router-scroll-positions";let kr={};function Lr(e){let{getKey:t,storageKey:r}=void 0===e?{}:e,{router:n}=yr(vr.UseScrollRestoration),{restoreScrollPosition:o,preventScrollReset:i}=br(gr.UseScrollRestoration),l=Ve(),s=wt(),c=yt();a.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),function(e,t){let{capture:r}={};a.useEffect((()=>{let t=null!=r?{capture:r}:void 0;return window.addEventListener("pagehide",e,t),()=>{window.removeEventListener("pagehide",e,t)}}),[e,r])}(a.useCallback((()=>{if("idle"===c.state){let e=(t?t(l,s):null)||l.key;kr[e]=window.scrollY}sessionStorage.setItem(r||Ar,JSON.stringify(kr)),window.history.scrollRestoration="auto"}),[r,t,c.state,l,s])),"undefined"!=typeof document&&(a.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(r||Ar);e&&(kr=JSON.parse(e))}catch(e){}}),[r]),a.useLayoutEffect((()=>{let e=null==n?void 0:n.enableScrollRestoration(kr,(()=>window.scrollY),t);return()=>e&&e()}),[n,t]),a.useLayoutEffect((()=>{if(!1!==o)if("number"!=typeof o){if(l.hash){let e=document.getElementById(l.hash.slice(1));if(e)return void e.scrollIntoView()}!0!==i&&window.scrollTo(0,0)}else window.scrollTo(0,o)}),[l,o,i]))}function Ur(e,t){let{capture:r}=t||{};a.useEffect((()=>{let t=null!=r?{capture:r}:void 0;return window.addEventListener("beforeunload",e,t),()=>{window.removeEventListener("beforeunload",e,t)}}),[e,r])}function Mr(e){let{when:t,message:r}=e,n=At(t);a.useEffect((()=>{"blocked"!==n.state||t||n.reset()}),[n,t]),a.useEffect((()=>{"blocked"===n.state&&(window.confirm(r)?setTimeout(n.proceed,0):n.reset())}),[n,r])}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,